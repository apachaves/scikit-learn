# Enhanced pyproject.toml with additional tools and configurations
# This extends the existing configuration with modern best practices

[project]
name = "scikit-learn"
dynamic = ["version"]
description = "A set of python modules for machine learning and data mining"
readme = "README.rst"
maintainers = [
    {name = "scikit-learn developers", email="scikit-learn@python.org"},
]
dependencies = [
  "numpy>=1.19.5",
  "scipy>=1.6.0",
  "joblib>=1.2.0",
  "threadpoolctl>=3.1.0",
]
requires-python = ">=3.9"
license = {file = "COPYING"}
keywords = ["machine learning", "data mining", "statistics", "artificial intelligence"]
classifiers=[
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: C",
  "Programming Language :: Python",
  "Topic :: Software Development",
  "Topic :: Scientific/Engineering",
  "Development Status :: 5 - Production/Stable",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Operating System :: Unix",
  "Operating System :: MacOS",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
]

[project.urls]
homepage = "https://scikit-learn.org"
source = "https://github.com/scikit-learn/scikit-learn"
download = "https://pypi.org/project/scikit-learn/#files"
tracker = "https://github.com/scikit-learn/scikit-learn/issues"
"release notes" = "https://scikit-learn.org/stable/whats_new"
documentation = "https://scikit-learn.org/stable/"
funding = "https://scikit-learn.org/stable/about.html#funding"

[project.optional-dependencies]
build = ["numpy>=1.19.5", "scipy>=1.6.0", "cython>=3.0.10", "meson-python>=0.16.0"]
install = ["numpy>=1.19.5", "scipy>=1.6.0", "joblib>=1.2.0", "threadpoolctl>=3.1.0"]
benchmark = ["matplotlib>=3.3.4", "pandas>=1.2.0", "memory_profiler>=0.57.0"]
docs = [
    "matplotlib>=3.3.4",
    "scikit-image>=0.17.2",
    "pandas>=1.2.0",
    "seaborn>=0.9.0",
    "memory_profiler>=0.57.0",
    "sphinx>=7.3.7",
    "sphinx-copybutton>=0.5.2",
    "sphinx-gallery>=0.17.1",
    "numpydoc>=1.2.0",
    "Pillow>=7.1.2",
    "pooch>=1.6.0",
    "sphinx-prompt>=1.4.0",
    "sphinxext-opengraph>=0.9.1",
    "plotly>=5.14.0",
    "polars>=0.20.30",
    "sphinx-design>=0.5.0",
    "sphinx-design>=0.6.0",
    "sphinxcontrib-sass>=0.3.4",
    "pydata-sphinx-theme>=0.15.3",
    "sphinx-remove-toctrees>=1.0.0.post1",
    "towncrier>=24.8.0",
]
examples = [
    "matplotlib>=3.3.4",
    "scikit-image>=0.17.2",
    "pandas>=1.2.0",
    "seaborn>=0.9.0",
    "pooch>=1.6.0",
    "plotly>=5.14.0",
]
tests = [
    "matplotlib>=3.3.4",
    "scikit-image>=0.17.2",
    "pandas>=1.2.0",
    "pytest>=7.1.2",
    "pytest-cov>=2.9.0",
    "pytest-xdist>=2.5.0",
    "pytest-timeout>=2.1.0",
    "ruff>=0.5.1",
    "black>=24.3.0",
    "mypy>=1.9",
    "pyamg>=4.0.0",
    "polars>=0.20.30",
    "pyarrow>=12.0.0",
    "numpydoc>=1.2.0",
    "pooch>=1.6.0",
]
# Enhanced development dependencies
dev = [
    "pre-commit>=3.0.0",
    "isort>=5.12.0",
    "docformatter>=1.7.5",
    "pydocstyle>=6.3.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pip-audit>=2.6.0",
    "vulture>=2.7",
    "interrogate>=1.5.0",
    "coverage[toml]>=7.0.0",
]
# Security and compliance
security = [
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pip-audit>=2.6.0",
    "semgrep>=1.0.0",
]
maintenance = ["conda-lock==2.5.7"]

[build-system]
build-backend = "mesonpy"
requires = [
    "meson-python>=0.16.0",
    "Cython>=3.0.10",
    "numpy>=2",
    "scipy>=1.6.0",
]

# Enhanced Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
preview = true
exclude = '''
/(
    \.eggs         # exclude a few common directories in the
  | \.git          # root of the project
  | \.mypy_cache
  | \.vscode
  | build
  | dist
  | doc/_build
  | doc/auto_examples
  | sklearn/externals
  | asv_benchmarks/env
)/
'''

# Enhanced Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py39"
exclude=[
    ".git",
    "__pycache__",
    "dist",
    "sklearn/externals",
    "doc/_build",
    "doc/auto_examples",
    "build",
    "asv_benchmarks/env",
    "asv_benchmarks/html",
    "asv_benchmarks/results",
    "asv_benchmarks/benchmarks/cache",
]

[tool.ruff.lint]
preview = true
explicit-preview-rules = true
select = [
    "E", "F", "W",  # pycodestyle, pyflakes
    "I",            # isort
    "N",            # pep8-naming
    "UP",           # pyupgrade
    "B",            # flake8-bugbear
    "C4",           # flake8-comprehensions
    "SIM",          # flake8-simplify
    "TCH",          # flake8-type-checking
    "TID",          # flake8-tidy-imports
    "CPY001",       # copyright header check
    "RUF",          # Ruff-specific rules
]
ignore=[
    "E203",   # space before : (needed for how black formats slicing)
    "E731",   # do not assign a lambda expression, use a def
    "E741",   # do not use variables named 'l', 'O', or 'I'
    "E721",   # Use `is` and `is not` for type comparisons
    "F841",   # Local variable is assigned to but never used
    "N803",   # Argument name should be lowercase
    "N806",   # Variable in function should be lowercase
    "UP007",  # Use `X | Y` for type annotations (not ready for Python 3.9)
]

[tool.ruff.lint.flake8-copyright]
notice-rgx = "\\#\\ Authors:\\ The\\ scikit\\-learn\\ developers\\\r?\\\n\\#\\ SPDX\\-License\\-Identifier:\\ BSD\\-3\\-Clause"

[tool.ruff.lint.per-file-ignores]
"examples/*"=["E402", "N803", "N806"]
"doc/conf.py"=["E402"]
"**/tests/*"=["CPY001", "N803", "N806"]
"asv_benchmarks/*"=["CPY001"]
"benchmarks/*"=["CPY001"]
"doc/*"=["CPY001"]
"build_tools/*"=["CPY001"]
"sklearn/_build_utils/*"=["CPY001"]
"maint_tools/*"=["CPY001"]
".spin/*"=["CPY001"]
".github/*"=["CPY001"]
"sklearn/__init__.py"=["F822"]

# Enhanced MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_concatenate = true
check_untyped_defs = true
disallow_untyped_decorators = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_reexport = true
strict_optional = true
ignore_missing_imports = true
allow_redefinition = true
exclude = [
    "sklearn/externals",
    "asv_benchmarks",
    "benchmarks",
    "doc",
    "examples",
]

[[tool.mypy.overrides]]
module = "sklearn.externals.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "joblib.*"
follow_imports = "skip"

# Enhanced Coverage configuration
[tool.coverage.run]
source = ["sklearn"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "sklearn/externals/*",
    "sklearn/_build_utils/*",
    "asv_benchmarks/*",
    "benchmarks/*",
    "doc/*",
    "examples/*",
]
parallel = true
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "sklearn/externals", "asv_benchmarks", "benchmarks", "doc", "examples"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests

# Vulture dead code detection
[tool.vulture]
exclude = ["sklearn/externals/", "asv_benchmarks/", "benchmarks/", "doc/", "examples/"]
ignore_decorators = ["@pytest.fixture", "@property", "@abstractmethod"]
ignore_names = ["_*", "test_*", "Test*"]
min_confidence = 80

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["sklearn"]
known_third_party = ["numpy", "scipy", "matplotlib", "pandas", "joblib"]
skip = ["sklearn/externals"]

# docformatter configuration
[tool.docformatter]
wrap-summaries = 88
wrap-descriptions = 88
make-summary-multi-line = true
close-quotes-on-newline = true

# pydocstyle configuration
[tool.pydocstyle]
convention = "numpy"
add-ignore = ["D100", "D104", "D105", "D107"]  # Missing docstrings in some cases
match-dir = "(?!tests|externals|_build_utils).*"

# interrogate documentation coverage
[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
fail-under = 80
exclude = ["tests", "sklearn/externals", "asv_benchmarks", "benchmarks", "doc", "examples"]
verbose = 2

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.1.2"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-pytest-warnings",
    "--color=yes",
    "--tb=short",
    "--cov=sklearn",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85",
]
testpaths = ["sklearn"]
doctest_optionflags = ["NORMALIZE_WHITESPACE", "ELLIPSIS"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "network: marks tests as requiring network access",
    "gpu: marks tests as requiring GPU",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Cython-lint configuration (enhanced)
[tool.cython-lint]
ignore = [
    'E24',   # multiple spaces/tab after comma
    'E203',  # space before : (needed for how black formats slicing)
    'E501',  # line too long
    'E731',  # do not assign a lambda expression, use a def
    'E741',  # do not use variables named 'l', 'O', or 'I'
    'W503',  # line break before binary operator
    'W504',  # line break after binary operator
]
exclude = '''
(
    asv_benchmarks/
  | sklearn/_loss/_loss.pyx
  | sklearn/linear_model/_sag_fast.pyx
  | sklearn/linear_model/_sgd_fast.pyx
  | sklearn/utils/_seq_dataset.pyx
  | sklearn/utils/_seq_dataset.pxd
  | sklearn/utils/_weight_vector.pyx
  | sklearn/utils/_weight_vector.pxd
  | sklearn/metrics/_dist_metrics.pyx
  | sklearn/metrics/_dist_metrics.pxd
  | sklearn/metrics/_pairwise_distances_reduction/_argkmin.pxd
  | sklearn/metrics/_pairwise_distances_reduction/_argkmin.pyx
  | sklearn/metrics/_pairwise_distances_reduction/_argkmin_classmode.pyx
  | sklearn/metrics/_pairwise_distances_reduction/_base.pxd
  | sklearn/metrics/_pairwise_distances_reduction/_base.pyx
  | sklearn/metrics/_pairwise_distances_reduction/_datasets_pair.pxd
  | sklearn/metrics/_pairwise_distances_reduction/_datasets_pair.pyx
  | sklearn/metrics/_pairwise_distances_reduction/_middle_term_computer.pxd
  | sklearn/metrics/_pairwise_distances_reduction/_middle_term_computer.pyx
  | sklearn/metrics/_pairwise_distances_reduction/_radius_neighbors.pxd
  | sklearn/metrics/_pairwise_distances_reduction/_radius_neighbors.pyx
)
'''

# Enhanced check-sdist configuration
[tool.check-sdist]
sdist-only = []
git-only = [
    ".*", 
    "asv_benchmarks", 
    "azure-pipelines.yml", 
    "benchmarks", 
    "build_tools", 
    "maint_tools",
    "*.md",
    "*.yml",
    "*.yaml",
]
default-ignore = false

# Spin configuration (enhanced)
[tool.spin]
package = "sklearn"

[tool.spin.commands]
"Build" = [
  "spin.cmds.pip.install",
  "spin.cmds.meson.test",
  ".spin/cmds.py:clean",
]
"Documentation" = [
  "spin.cmds.meson.docs"
]
"Lint" = [
  ".spin/cmds.py:lint",
]
"Test" = [
  ".spin/cmds.py:test",
]

# Enhanced towncrier configuration
[tool.towncrier]
package = "sklearn"
filename = "doc/whats_new/v1.7.rst"
single_file = true
directory = "doc/whats_new/upcoming_changes"
issue_format = ":pr:`{issue}`"
template = "doc/whats_new/upcoming_changes/towncrier_template.rst.jinja2"
all_bullets = false
underlines = ["=", "-", "~"]

[[tool.towncrier.type]]
directory = "major-feature"
name = "|MajorFeature|"
showcontent = true

[[tool.towncrier.type]]
directory = "feature"
name = "|Feature|"
showcontent = true

[[tool.towncrier.type]]
directory = "efficiency"
name = "|Efficiency|"
showcontent = true

[[tool.towncrier.type]]
directory = "enhancement"
name = "|Enhancement|"
showcontent = true

[[tool.towncrier.type]]
directory = "fix"
name = "|Fix|"
showcontent = true

[[tool.towncrier.type]]
directory = "api"
name = "|API|"
showcontent = true

[[tool.towncrier.type]]
directory = "other"
name = ""
showcontent = true

# Changelog bot configuration (enhanced)
[tool.changelog-bot]
[tool.changelog-bot.towncrier_changelog]
enabled = true
verify_pr_number = true
changelog_noop_label = "No Changelog Needed"
whatsnew_pattern = 'doc/whatsnew/upcoming_changes/[^/]+/\d+\.[^.]+\.rst'